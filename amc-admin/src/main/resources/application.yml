server:
  port:
  servlet:
    context-path: /amc



spring:
  datasource:
    url: jdbc:mysql://localhost:3306/amc?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
    username: root
    password: 1234
    driver-class-name: com.mysql.cj.jdbc.Driver

    druid:
      # 配置 spring 监控
      aop-patterns: com.amc.*

      # 开启 web 监控
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/
        login-username: admin
        login-password: 1234
        reset-enable: false

      web-stat-filter:
        enabled: true
        url-pattern: /*
        exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'
      filters: stat,wall,slf4j

      filter:
        stat:
          enabled: true
          # 定义慢查询时间,凡是超过 1000 毫秒的都是慢查询
          slow-sql-millis: 1000
          # 是否记录慢查询日志
          log-slow-sql: true
        wall:
          enabled: true
          config:
            # 防火墙设置不允许删表
            # 删表操作都是被拦截
            drop-table-allow: false
            # 是否允许执行多条 SQL 语句
    type: com.alibaba.druid.pool.DruidDataSource
  output:
    ansi:
      enabled: detect

mybatis:
  mapper-locations: classpath:mapper/*.xml
  config-location: classpath:mybatis-config.xml

# 分页插件
pagehelper:
  # helperDialect: 这是你使用的数据库的方言。在这个例子中，它被设置为 mysql，这意味着你使用的是 MySQL 数据库。
  # reasonable: 这个参数用于设置分页参数（页码和页面大小）的合理化。如果它被设置为 true，那么当请求的页码超出范围时，PageHelper 会自动调整页码。例如，如果请求的页码小于 1，那么 PageHelper 会将页码设置为 1；如果请求的页码大于总页数，那么 PageHelper 会将页码设置为总页数。
  # supportMethodsArguments: 这个参数用于设置是否支持通过 Mapper 接口参数来传递分页参数。如果它被设置为 true，那么你可以在你的 Mapper 接口方法中添加 pageNum 和 pageSize 参数，PageHelper 会自动识别这些参数并进行分页。
  # params: 这个参数用于设置其他的分页参数。在这个例子中，它被设置为 count=countSql，这意味着 PageHelper 会使用 countSql 作为计算总记录数的 SQL 语句。
  # autoRuntimeDialect: 这个参数用于设置是否自动检测当前的数据库方言。如果它被设置为 true，那么 PageHelper 会自动检测当前的数据库方言并使用相应的分页查询语句。这对于多数据源的情况非常有用。
  helperDialect: mysql
  #  reasonable: true
  supportMethodsArguments: true
  params: count=countSql
#  autoRuntimeDialect: true


# 日志配置
# 在这个例子中，com.amc 包的日志级别被设置为 debug。这意味着，对于 com.amc 包中的所有类，只要日志级别等于或高于 debug，就会被记录下来。
# 日志级别从低到高分别是：TRACE、DEBUG、INFO、WARN、ERROR、FATAL、OFF。debug 级别会记录 debug、info、warn、error 和 fatal 级别的日志。  这样的配置可以帮助开发者在开发或者调试应用时，更好地了解应用的运行状态和问题所在。
logging:
  level:
    com.amc: debug
    org.springframework: warn

amc:
  name: amc-server
  desc: amc-server 接口开发文档
  version: 1.0.0
  author: Ax
  email: 13171754463@163.com
  url: https://github.com/ajaxpost/amc-server

